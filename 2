Дано целое число N и массив из N целых чисел, содержащий по крайней мере 2 нуля. Вывести сумму чисел из этого массива, расположенных между последними 2 нулями. Если они идут подряд, то вывести 0.

#include <iostream>

using namespace std;

#define N 15

int function(int a[N])

{

int nul = 0, sum = 0;

for (int i = N; i > 0; i--)

{

if (a[i] == 0)

{

nul++; // считаем чтобы было 2 нуля

sum += a[i]; // записываем 0 на случай, если нуля 2 подряд

}

if (nul == 2) break; // второй нуль, остановка

if (nul == 1) sum += a[i]; //сумма между нулями

cout << sum;

}

return (a);

}

int main()

{

setlocale(LC_ALL, "Russian");

int a[N];

cout << "Введите массив, в котором по крайней мере 2 нуля." << endl;

for (int i = 0; i < N; i++)

{

cin >> a[i];

}

function(a);

system("pause");

return 0;

}

2. Вычислить сумму элементов матрицы в тех строках, которые содержат положительные, отрицательные и нулевые элементы.

#include <iostream>

using namespace std;

#define N 5

void function(int a[N][N])

{

int pol = 0, otr = 0, nul = 0, sum = 0, sumob = 0;

for (int i = 0; i < N; i++)

{

for (int j = 0; j < N; j++)

{

if (a[i][j] < 0) otr++;

if (a[i][j] > 0) pol++;

if (a[i][j] == 0) nul++; //проверки в строке всех условий

sum += a[i][j]; //запись суммы в строке

}

if ((pol > 0) && (otr > 0) && (nul > 0)) sumob += sum;

// проверка всех условий, запись в общую сумму

pol = 0; otr = 0; nul = 0; sum = 0; //обнуление

}

cout << sumob;

}

int main()

{

setlocale(LC_ALL, "Russian");

int a[N][N];

cout << "Введите массив 5х5" << endl;

for (int i = 0; i < N; i++)

for (int j = 0; j < N; j++)

{

cin >> a[i][j];

}

function(a);

system("pause");

return 0;

}

3. Дан массив размера N. Найти номер максимального из его локальных минимумов (локальный минимум – элемент, который меньше любого из своих соседей)

#include <iostream>

using namespace std;

#define N 15

void function (int a[N])

{

int imax = 0;

for (int i = 0; i < N; i++) cin >> a[i];

int max = a[0]; //будем сравнивать с первым элементом

for (int i = 1; i < N - 1; i++)

{

if (a[i] < a[i - 1] && a[i] < a[i + 1] && a[i] > max)//Поиск локального минимума

{

max = a[i];

imax = i;

}

}

if (a[N - 1] < a[N - 2] && a[N - 1] > max) imax = N - 1; //проверка последнего элемента

cout <<"Порядковый номер локального минимума: " <<imax + 1 << endl;

}

int main()

{

setlocale(LC_ALL, "Russian");

int a[N];

cout << "Введите массив" << endl;

for (int i = 0; i < N; i++)

cin >> a[i];

function(a);

system("pause");

return 0;

}

4. Ввести с клавиатуры строку. Определить количество слов в строке между словами максимальной и минимальной длины.

#include <iostream>

using namespace std;

#define N 100

void function(char s[N])

{

int word = 0, min = 100, max = 0, imin = 0, imax = 0, sum = 0, j1 = 0, j2 = 0;

for (int i = 0; i < strlen(s) + 1; i++)

{

if ((s[i] == '\0') && (word == 0)) break; //поиск конца строки и остановка

if ((s[i] != ' ') && (s[i] != '\0')) word++; //подсчет букв в слове

else

{ //сравнивание с максимальной и минимальной длиной слова

if (word > max) { max = word; imax = i; }

if (word < min) { min = word; imin = i; }

word = 0;

}

}

if (imax > imin) { j2 = (imax - max); j1 = imin; }

//определяет, какое слово стоит раньше, записывает индексы для подсчета суммы

else { j2 = (imin - min); j1 = imax; }

for (int i = j1; i < j2; i++)

if (s[i] == ' ') sum++; //считает количество пробелов

cout << "количество слов:" << sum - 1 << endl; //количество слов = пробелы-1

}

int main()

{

setlocale(LC_ALL, "Russian");

cout << "Введите преддложение" << endl;

char s[N] = { 0 };

gets_s(s, N);

function(s);

system("pause");

return 0;

}

5. Ввести с клавиатуры строку. Вывести на экран все слова, начинающиеся и заканчивающиеся на одну и ту же букву.

#include <iostream>

#include <cstring>

using namespace std;

void operation(char* s)

{

int word = 0;

for (int i = 0; i <= strlen(s); i++)

{

if ((s[i] == '\0') && (word == 0))// находит конец предложения

break;

else if ((s[i] != ' ') && (s[i] != '\0'))//находит пробел между словами

word++;//считает длину слова

else

{

if (s[i - 1] == s[i - word]) //сравнивает первую и последнюю букву

{

for (int j = i - word; j < i; j++)

cout << s[j]; //выписывает слово

cout << ' ';

}

word = 0;

}

}

cout << endl;

}

int main()

{

char s[255] = { 0 };

cout << "Введите строку: " << endl;

gets_s(s);

operation(s);

system("pause");

6. }Вычислить произведение элементов массива, расположенных между первым положительным и последним отрицательным числом.

#include <iostream>

using namespace std;

#define N 10

void function(int a[N])

{

int otr, pol, pr = 1;

for (int i = 0; i < N; i++)

{

if (a[i] > 0) { pol = i; break; } //находит первое положительное

}

for (int i = N - 1; i >= 0; i--) {

if (a[i] < 0) { otr = i; break; } //находит последнее отрицательное

}

for (int i = pol + 1; i < otr; i++)

pr *= a[i]; //произведение между этими числами

cout << "Произведение: " << pr << endl;

}

int main()

{

setlocale(LC_ALL, "Russian");

int a[N];

cout << "Введите массив" << endl;

function(a);

system("pause");

return 0;

}

7. Даны 2 массива целых чисел a и b. Массив а отсортирован по возрастанию. Вставить в массив а элементы массивы b так, чтобы он остался отсортирован.

#include <iostream>

using namespace std;

int humain(int a[10], int b[5])

{

int i, j, t;

for (i = 0; i < 5; i++)

{

for (j = 0; j < 10; j++)

{

if ((b[i] < a[j]) || (b[i] == a[j])) //сравнивание элементов двух массивов

{

for (t = 10; t > j; t--) { a[t] = a[t - 1]; }

a[j] = b[i]; //Вставляем из б в а по возрастанию

break;

}

if ((j > 4)& (a[j] == 0)) { a[j] = b[i]; break; }

}

}

cout << "отсортированный по возрастанию массив a: " << endl;

for (i = 0; i < 10; i++)

{

cout << a[i]<<" ";

}

return 0;

}

int main()

{

setlocale(LC_ALL, "Russian");

int a[11] = { 0 }, b[5];

cout << "Введите отсортированный по возрастанию массив a: " << endl;

for (int i = 0; i < 5; i++) { cin >> a[i]; }

cout << "Введите массив b: " << endl;

for (int i = 0; i < 5; i++) { cin >> b[i]; }

humain(a, b);

return 0;

}

8. Определить количество отрицательных элементов в тех строках матрицы, которые содержат хотя бы 1 нулевой элемент.

#include <iostream>

using namespace std;

void AFA()

{

int a = 0;

int sum[3];

int string[3];

int x[3][4] = { {2, 7, 4, 0 },

{3, 0, -5, -6},

{4, -5, 0, 7} };//инициализация матрицы

for (int i = 0; i < 3; i++)

{

string[i] = 0;

}

for (int i = 0; i < 3; i++)

{

sum[i] = 0;

}

for (int i = 0; i < 3; i++) //вывод матрицы

{

for (int j = 0; j < 4; j++)

{

cout << x[i][j] << " ";

}

cout << endl;

}

for (int i = 0; i < 3; i++) {//Находим нули в матрице и запоминаем строчки

for (int j = 0; j < 4; j++)

{

if (x[i][j] == 0)

{

string[i] = string[i] + 1;

}

}

}

for (int i = 0; i < 3; i++) //Находим отрицательные илименты в строках которые запомнили и считаим их количество

{

if (string[i] > 0)

{

a = i;

for (int j = 0; j < 4; j++)

{

if (x[a][j] < 0)

{

sum[a] = sum[a] + 1;

}

}

}

}

for (int i = 0; i < 3; i++)

{//Выводим строки количество отрицательных элементов в каждой строке матрицы

if (sum[i] > 0)

{

cout << "Колическтво отрицательных элементов в строке " << i << " равно: " << sum[i] << endl;

}

}

for (int i = 0; i < 3; i++)

{

if (sum[i] == 0)

{

cout << "Строка " << i << " не имеет отрицательных элементов" << endl;

}

}

}

int main()

{

setlocale(LC_ALL, "rus");

AFA();

system("pause");

}

9. Сжать массив целых чисел, удалив из него нулевые элементы.

#include <iostream>

using namespace std;

#define N 10

void function(int a[N])

{

int count = 0;

for (int i = 0; i < N; i++)

{

if (a[i] == 0) { count++; } //счетчик нулевых элементов

}

int* b = new int[N - count]; //новый массив под количество ненулевых элементов

for (int i = 0, j = 0; i < N && j < (N - count); i++, j++)

{

if (a[i] == 0) { j--; continue; }

b[j] = a[i]; //запись ненулыевых элементов в новый массив

}

cout << "отсортированный массив:" << endl;

for (int i = 0; i < (N - count); i++)

{

cout << b[i] << " ";

}

}

int main()

{

setlocale(LC_ALL, "Russian");

int a[N];

cout << "Введите элементы массива " << endl;

for (int i = 0; i < N; i++)

{

cin >> a[i];

}

function(a);

system("pause");

return 0;

}

10. Посчитать сумму элементов массива до последнего положительного элемента.

#include <iostream>

using namespace std;

#define N 10

void function(int a[N])

{

int j = 0, sum = 0;

for (int i = N - 1; i >= 0; i--)

if (a[i] > 0) { j = i; break; } //поиск последнего положительного

if (j != 0) //подсчет суммы

{

for (int i = 0; i < j; i++)

sum += a[i];

cout << "Сумма:" << sum << endl;

} //случай если положительных нет или он стоит первым

else cout << "Положительных элементов нет, или он стоит первым." << endl;

}

int main()

{

setlocale(LC_ALL, "Russian");

int a[N];

cout << "Введите массив" << endl;

for (int i = 0; i < N; i++)

{

cin >> a[i];

}

function(a);

system("pause");

return 0;

}

11. Дан целочисленный массив размера N. Посчитать чередуются ли в нем четные и нечетные числа. Если чередуются, то вывести 0, если нет, то порядковый номер элемента, нарушающего закономерность.

#include <iostream>

using namespace std;

int humain(int a[10])

{

int i, j, x = 0, b = 0, k = 0;

if ((a[0] % 2) == 0) { i = 0; j = 1; if ((a[1]) % 2 == 0) { b = 1; } }

else {

i = 1; j = 0; if ((a[1]) % 2 == 1) { x = 1; }

}

while (((a[i] % 2) == 0) & (i < 10))

{

i = i + 2; x = i;

}

while (((a[j] % 2) == 1) & (j < 10))

{

j = j + 2; b = j;

}

if ((x > 9)& (b > 9)) { x = 0; b = 0; }

if (x < b) { k = x; }

else { k = b; }

return k;

}

int main()

{

int a[11] = { 0 };

cout << "Введите последовательность:" << endl;

for (int i = 0; i < 10; i++) { cin >> a[i]; }

cout << humain(a);

return 0;

}

12. Ввести с клавиатуры строку. Определить количество слов, в которых ни одна буква не повторяется.

#include <iostream>

using namespace std;

int humain(char ms[],int n)

{

int i,j,a=0,b=0, lp = 0,t=0,kol=0;

for (i = 0; i < n; i++)

{

if (ms[i] != ' ')

{

lp++;

if (lp == 1) { a = i - 1; }

else

{

for (j = i - 1; j > a; j--)

{

if (ms[i] == ms[j]) { t++; }

}

}

}

else

{

if (lp!=0)

{

if (t == 0) { kol++; }

}

lp = 0;

t = 0;

}

if (i == n - 1)

{

if (lp != 0)

{

if (t == 0) { kol++; }

}

}

}

return kol;

}

int main()

{

int n;

(cin >> n).get();

char* mas = { 0 };

mas = new char[n];

cin.getline(mas, '/n');

cout << humain(mas,n);

return 0;

}

13. Ввести с клавиатуры строку, состоящую из слов, разделенных пробелов, точкой и запятой. Если в словах встречается окончание ing, заменить его на ed.

#include <iostream>

using namespace std;

void humain(char ms[], int n)

{

int i, lp = 0, j;

for (i = 0; i < n; i++)

{

if ((ms[i] != ' ') & (ms[i] != ',') & (ms[i] != '.'))//поиск разделителя

{

lp++;

}

else

{

if (lp != 0)

{//поиск окончания инг

if ((ms[i - 1] == 'g') & (ms[i - 2] == 'n') & (ms[i - 3] == 'i')) {

ms[i - 1] = 'd'; ms[i - 2] = 'e'; //замена окончания

for (j = i - 3; j < n - 1; j++)//сдвиг на один после замены

{

ms[j] = ms[j + 1];

}

ms[n - 1] = ' ';

lp = 0; }

}

}

if ((i == n - 1) & (lp != 0)) //случай если слово инг

{

if ((ms[i] == 'g') & (ms[i - 1] == 'n') & (ms[i - 2] == 'i'))

{

ms[i] = 'd'; ms[i - 1] = 'e';

}

for (j = i - 2; j < n - 1; j++)

{

ms[j] = ms[j + 1];

}

ms[n - 1] = ' ';

lp = 0;

}

}

for (i = 0; i < n; i++)

{

cout << ms[i];

}

}

int main()

{

int n;

(cin >> n).get();

char* mas = { 0 };

mas = new char[n];

cin.getline(mas, '/n');

humain(mas, n);

return 0;

}

14. Даны 2 целых и положительных числа А и В. Написать программу, которая выводит сумму чисел между А и В, причем каждое число выводится столько раз, сколько значению оно равно (например число 3 выводится 3 раза).

#include <iostream>

using namespace std;

#define N 1000

void function(int a, int b)

{

int size = 0, sum = 0, m[N] = { 0 }, temp;

if (b < a) //сравнить какое число стоит раньше и поменять местами если b>a

{

temp = b;

b = a;

a = temp;

}

size = (b - a - 1); //количество чисел между б и а

for (int i = 1; i < size; i++)

{

m[i] = a + i;

sum += m[i]; //сумма между а и б

}

cout << "Сумма между числами:" << endl;

for (int i = 0; i < sum; i++)

{

cout << sum << " "; //вывод суммы нужное количество раз

}

}

int main()

{

setlocale(LC_ALL, "Russian");

cout << "Введите два целых положительных числа:" << endl;

int a, b;

cin >> a;

cout << endl;

cin >> b;

function(a, b);

system("pause");

return 0;

}

15. Вычислить произведение элементов массива, расположенные между первым и последним отрицательным элементом.

#include <iostream>

using namespace std;

#define N 10

void function(int a[N])

{

int otr1, otr2, pr = 1, sum = 0;

for (int i = 0; i < N; i++)

if (a[i] < 0)sum++; //проверка что отрицательных минимум 2

if (sum > 1) {

for (int i = 0; i < N; i++)

{

if (a[i] < 0) { otr1 = i; break; } //поиск первого отрицательного

}

for (int i = N - 1; i >= 0; i--)

{

if (a[i] < 0) { otr2 = i; break; } //поиск второго отрицательного

}

for (int i = otr1 + 1; i < otr2; i++)

pr *= a[i]; //подсчет произведения

cout << "Произведение: " << pr << endl;

}

else cout << "Отрицательных чисел меньше двух" << endl;

}

int main()

{

setlocale(LC_ALL, "Russian");

int a[N];

cout << "Введите массив" << endl;

for (int i = 0; i < N; i++)

cin >> a[i];

function(a);

system("pause");

return 0;

}

16. Ввести с клавиатуры строку. Определить наибольшее число подряд идущих пробелов.

#include <iostream>

using namespace std;

#define N 100

void function(char s[N])

{

int sum = 0, max = 0;

for (int i = 0; i < strlen(s) + 1; i++)

{

if ((s[i] == ' ') && (s[i + 1] == ' ')) sum++; //подсчет подряд идущих пробелов

else

{

if (sum > max) { max = sum; sum = 0; } //поиск макс количества пробелов

}

}

cout << "количество пробелов:" << max << endl;

}

int main()

{

setlocale(LC_ALL, "Russian");

cout << "Введите преддложение" << endl;

char s[N] = { 0 };

gets_s(s, N);

function(s);

system("pause");

return 0;

}

17. Посчитать количество символов в строке между самыми длинным и самым коротким словом.

#

ng namespace std;

#define N 100

void function(char s[N])

{

int word = 0, min = 100, max = 0, imin = 0, imax = 0, sum = 0, j1 = 0, j2 = 0;

for (int i = 0; i < strlen(s) + 1; i++)

{

if ((s[i] == '\0') && (word == 0)) break; //поиск конца строки

if ((s[i] != ' ') && (s[i] != '\0')) word++; //длина слова

else

{ //нахождение самого длинного и самого короткого

if (word > max) { max = word; imax = i; }

if (word < min) { min = word; imin = i; }

word = 0;

}

}

if (imax > imin) { j2 = (imax - max); j1 = imin; }

else { j2 = (imin - min); j1 = imax; } //запись индексов для подсчета символов

for (int i = j1; i < j2; i++)

sum++; //сумма символов

cout << "количество символов:" << sum << endl;

}

int main()

{

setlocale(LC_ALL, "Russian");

cout << "Введите преддложение" << endl;

char s[N] = { 0 };

gets_s(s, N);

function(s);

system("pause");

return 0;

}

18. Найти наиболее часто встречающиеся число, если их несколько, то наименьшее из них.

#include <iostream>

using namespace std;

#define N 10

void AFA() {

int mass[N];

//заполняем массив случайными значениями от 0 до 99

cout << "Введите массив состоящий из значениями от 0 до 99 " << endl;

for (int i = 0; i < N; i++)

{

cin >> mass[i];

}

cout << "Введенный массив:" << endl;

for (int i = 0; i < N; i++)

{

cout << mass[i] << " ";

}

int maxcount(1), nn(-1);

for (int i = 0; i < N; i++)//перебираем все элементы массива

{

int count(0);

for (int j = i; j < N; j++) //перебираем все элементы от i до конца

//если элемент i совпадает с одним из последующих (j), то увеличиваем число

if (mass[i] == mass[j])

count++;

if (maxcount < count)//если число больше ранее сохраненного - перезаписываем

{

maxcount = count;

nn = i;

}

}

cout << endl; //выводим

if (nn > -1) //значение

{

cout << "Часто повторяющееся: ";

cout << endl << mass[nn] << endl;

}

else //или то, что повторяющихся элементов нет

cout << endl << "Повторяющихся элементов нет" << endl;

}

int main()

{

setlocale(LC_ALL, "rus");

AFA();

system("pause");

}
